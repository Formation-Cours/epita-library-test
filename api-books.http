### Configuration des variables

@baseUrl = https://library.olprog-formation.fr
@contentType = application/json


### Book Controller - API Tests


### Prerequisites: Create authors first (run these before book tests)

POST {{baseUrl}}/api/authors HTTP/1.1
Content-Type: {{contentType}}

{
  "biography": "French poet, novelist, and dramatist",
  "birthDate": "1802-02-26",
  "email": "victor.hugo@example.com",
  "name": "Victor Hugo"
}


### 

POST {{baseUrl}}/api/authors HTTP/1.1
Content-Type: {{contentType}}

{
  "biography": "French philosopher, author, and journalist",
  "birthDate": "1913-11-07",
  "email": "albert.camus@example.com",
  "name": "Albert Camus"
}


### 1. Create a new book

POST {{baseUrl}}/api/books HTTP/1.1
Content-Type: {{contentType}}

{
  "author": {
    "id": 1
  },
  "genre": "Historical Fiction",
  "isbn": "9782070408001",
  "pages": 1232,
  "publicationDate": "1862-01-01",
  "title": "Les Misérables"
}


### 2. Create another book

POST {{baseUrl}}/api/books HTTP/1.1
Content-Type: {{contentType}}

{
  "author": {
    "id": 2
  },
  "genre": "Philosophical Fiction",
  "isbn": "9782070360021",
  "pages": 123,
  "publicationDate": "1942-01-01",
  "title": "L'Étranger"
}


### 3. Create a third book

POST {{baseUrl}}/api/books HTTP/1.1
Content-Type: {{contentType}}

{
  "author": {
    "id": 1
  },
  "genre": "Historical Fiction",
  "isbn": "9782070418413",
  "pages": 956,
  "publicationDate": "1831-01-01",
  "title": "Notre-Dame de Paris"
}


### 4. Get all books

GET {{baseUrl}}/api/books HTTP/1.1


### 5. Get book by ID

GET {{baseUrl}}/api/books/1 HTTP/1.1


### 6. Get book by ISBN

GET {{baseUrl}}/api/books/isbn/9782070408001 HTTP/1.1


### 7. Search books by title

GET {{baseUrl}}/api/books/search?title=Les HTTP/1.1


### 8. Get books by status (AVAILABLE)

GET {{baseUrl}}/api/books/status/AVAILABLE HTTP/1.1


### 9. Get books by status (BORROWED)

GET {{baseUrl}}/api/books/status/BORROWED HTTP/1.1


### 10. Get books by genre

GET {{baseUrl}}/api/books/genre/Historical%20Fiction HTTP/1.1


### 11. Get books by author ID

GET {{baseUrl}}/api/books/author/1 HTTP/1.1


### 12. Get books by author name

GET {{baseUrl}}/api/books/author/name?authorName=Victor Hugo HTTP/1.1


### 13. Get books by publication date range

GET {{baseUrl}}/api/books/publication-date?startDate=1800-01-01&endDate=1870-12-31 HTTP/1.1


### 14. Update a book

PUT {{baseUrl}}/api/books/1 HTTP/1.1
Content-Type: {{contentType}}

{
  "author": {
    "id": 1
  },
  "genre": "Historical Fiction",
  "isbn": "9782070408001",
  "pages": 1463,
  "publicationDate": "1862-01-01",
  "title": "Les Misérables (Edition complète)"
}


### 15. Borrow a book

PATCH {{baseUrl}}/api/books/9782070408001/borrow HTTP/1.1


### 16. Return a book

PATCH {{baseUrl}}/api/books/9782070408001/return HTTP/1.1


### 17. Delete a book

DELETE {{baseUrl}}/api/books/3 HTTP/1.1


### Test cases with different book statuses


### 18. Create book with RESERVED status

POST {{baseUrl}}/api/books HTTP/1.1
Content-Type: {{contentType}}

{
  "author": {
    "id": 2
  },
  "genre": "Philosophical Fiction",
  "isbn": "9782070360038",
  "pages": 279,
  "publicationDate": "1947-01-01",
  "status": "RESERVED",
  "title": "La Peste"
}


### 19. Create book with MAINTENANCE status

POST {{baseUrl}}/api/books HTTP/1.1
Content-Type: {{contentType}}

{
  "author": {
    "id": 2
  },
  "genre": "Philosophy",
  "isbn": "9782070322882",
  "pages": 187,
  "publicationDate": "1942-01-01",
  "status": "MAINTENANCE",
  "title": "Le Mythe de Sisyphe"
}


### 20. Get books with RESERVED status

GET {{baseUrl}}/api/books/status/RESERVED HTTP/1.1


### 21. Get books with MAINTENANCE status

GET {{baseUrl}}/api/books/status/MAINTENANCE HTTP/1.1


### Test cases with invalid data


### 22. Create book with invalid ISBN

POST {{baseUrl}}/api/books HTTP/1.1
Content-Type: {{contentType}}

{
  "author": {
    "id": 1
  },
  "genre": "Test",
  "isbn": "invalid-isbn",
  "pages": 200,
  "publicationDate": "2023-01-01",
  "title": "Test Book"
}


### 23. Create book with negative pages

POST {{baseUrl}}/api/books HTTP/1.1
Content-Type: {{contentType}}

{
  "author": {
    "id": 1
  },
  "genre": "Test",
  "isbn": "978-2-07-999999-9",
  "pages": -100,
  "publicationDate": "2023-01-01",
  "title": "Test Book"
}


### 24. Create book without required fields

POST {{baseUrl}}/api/books HTTP/1.1
Content-Type: {{contentType}}

{
  "genre": "Test",
  "pages": 200,
  "publicationDate": "2023-01-01"
}


### 25. Create book with non-existent author

POST {{baseUrl}}/api/books HTTP/1.1
Content-Type: {{contentType}}

{
  "author": {
    "id": 999
  },
  "genre": "Test",
  "isbn": "9782078888888",
  "pages": 200,
  "publicationDate": "2023-01-01",
  "title": "Test Book"
}


### 26. Get non-existent book

GET {{baseUrl}}/api/books/999 HTTP/1.1


### 27. Get book with non-existent ISBN

GET {{baseUrl}}/api/books/isbn/9789999999999 HTTP/1.1


### 28. Try to borrow non-existent book

PATCH {{baseUrl}}/api/books/9789999999999/borrow HTTP/1.1


### 29. Try to return non-existent book

PATCH {{baseUrl}}/api/books/9789999999999/return HTTP/1.1


### 30. Try to borrow already borrowed book (run after borrowing a book)

PATCH {{baseUrl}}/api/books/9782070360021/borrow HTTP/1.1


### 

PATCH {{baseUrl}}/api/books/9782070360021/borrow HTTP/1.1


### 31. Update non-existent book

PUT {{baseUrl}}/api/books/999 HTTP/1.1
Content-Type: {{contentType}}

{
  "author": {
    "id": 1
  },
  "genre": "Test",
  "isbn": "9789999999999",
  "pages": 200,
  "publicationDate": "2023-01-01",
  "title": "Non Existent Book"
}


### 32. Delete non-existent book

DELETE {{baseUrl}}/api/books/999 HTTP/1.1


### Advanced search scenarios


### 33. Search books with partial title match

GET {{baseUrl}}/api/books/search?title=Notre HTTP/1.1


### 34. Get books by partial author name

GET {{baseUrl}}/api/books/author/name?authorName=Albert HTTP/1.1


### 35. Get books in date range with no results

GET {{baseUrl}}/api/books/publication-date?startDate=2020-01-01&endDate=2023-12-31 HTTP/1.1


### 36. Get books by non-existent genre

GET {{baseUrl}}/api/books/genre/Science&20Fiction HTTP/1.1
